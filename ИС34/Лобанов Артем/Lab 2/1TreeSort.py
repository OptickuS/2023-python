# —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∫—Ä—É—á–µ —á–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–µ—Ä–µ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–±—Ä–∞—Ç—å 100000 —á–∏—Å–µ–ª —Å–∏–¥—è—â–∏—Ö —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, 
# –∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ–∂–µ—Ç üòé

class Node:
    def __init__(self, val):
        self.val = val
        self.left = None # –º–µ—Å—Ç–æ –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤
        self.right = None # –º–µ—Å—Ç–æ –¥–ª—è –∫—Ä—É—Ç—ã—Ö
        #—Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–±—Ä–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–µ–º –∫—Ä—É—Ç–æ—Å—Ç—å —É–∑–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å
        #–∫—Ä—É—Ç–æ—Å—Ç—å—é —É–∑–ª–∞ –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞ –¥–æ —Å–∞–º–æ–≥–æ –æ—Ç–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–∑
        self.height = 1

# —Å–ª–∏—è–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤–µ—á–Ω–æ–≥–æ
# —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–µ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –≤—Å–µ–ª–µ–Ω—Å–∫–æ–π –±–µ—Å–∫—Ä–∞–π–Ω–æ—Å—Ç–∏
# –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –±–µ—Å–ø–æ–¥–æ–±–Ω–æ–µ –∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –≤ —Ç–æ–∂–µ –≤—Ä–µ–º—è
def insert(node, value, key=lambda x: x):
    if node == None:
        return Node(value)
    if key(value) < key(node.val):
        node.left = insert(node.left, value, key=key)
    else:
        node.right = insert(node.right, value, key=key)
    
    # –∫—Ä—É—Ç–æ—Å—Ç—å —Å–ª–µ–≤–∞ –º–∏–Ω—É—Å –∫—Ä—É—Ç–æ—Å—Ç—å —Å–ø—Ä–∞–≤–∞
    left_height = get_height(node.left) if node.left != None else 0
    right_height = get_height(node.right) if node.right != None else 0
    balance_factor = left_height - right_height

    if balance_factor > 1 and key(value) < key(node.left.val):
        # —Å–ª–µ–≤–∞ –±–æ–ª—å—à–µ - –ø–æ–¥–Ω—è—Ç—å –ª–µ–≤–æ
        return rotate_right(node)
    if balance_factor < -1 and key(value) > key(node.right.val):
        # —Å–ø—Ä–∞–≤–∞ –±–æ–ª—å—à–µ - –ø–æ–¥–Ω—è—Ç—å –ø—Ä–∞–≤–æ
        return rotate_left(node)

    # –õ–µ–≤—ã–π –ø—Ä–∞–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç
    """
                       node
                     /
        node.left_child
                     \
                       new_node
    """
    if balance_factor > 1 and key(value) > key(node.left.val):
        node.left = rotate_left(node.left)
        """              node
                        /
                new_node      
               /                 
        node.left_child """
        return rotate_right(node)
    
    # –ü—Ä–∞–≤—ã–π –ª–µ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç
    """
             node
                 \
                node.right_child
                 /
         new_node
    """
    if balance_factor < -1 and key(value) < key(node.right.val):
        node.right = rotate_right(node.right)
        """ node
                \
                 new_node
                         \
                          node.right_child"""
        return rotate_left(node)
    
    node.height = 1 + max(get_height(node.left), get_height(node.right))
    return node

def get_height(node):
    return node.height if node != None else 0

# –ü–æ–≤–æ—Ä–æ—Ç
"""
           A God                        The God
            |                              |
      node(new_root)      –ü—Ä–∞–≤—ã–π     new_root(node)
        /         \     -------->      /      \ 
  new_root(node)   A                  B     node(new_root)
     /   \              <--------               /  \ 
    B     C               (–õ–µ–≤—ã–π)              C    A
"""
def rotate_right(node):
    if node == None or node.left == None:
        return node
    new_root = node.left
    node.left = new_root.right
    new_root.right = node

    node.height = 1 + max(get_height(node.left), get_height(node.right))
    new_root.height = 1 + max(get_height(new_root.left), get_height(new_root.right))
    return new_root

def rotate_left(node):
    if node == None or node.right == None:
        return node
    new_root = node.right
    node.right = new_root.left
    new_root.left = node

    node.height = 1 + max(get_height(node.left), get_height(node.right))
    new_root.height = 1 + max(get_height(new_root.left), get_height(new_root.right))
    return new_root

def recursion_traversal(root):
    return recursion_traversal(root.left) + [root.val] + recursion_traversal(root.right) if root!=None else []
def iterative_traversal(root):
    stack = []
    result = []
    current = root
    # –î–æ–≤–µ–¥–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–µ—Ä—Ç—ã, –≤–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥, –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–æ–Ω—É
    # –ï—Å–ª–∏ —Ç–∞–º –±—É–¥–µ—Ç —Å–º–µ—Ä—Ç—å - –ø—Ä–∏–º–µ–º –µ—ë –∫–∞–∫ –∫–æ–Ω–µ—Ü
    # –õ–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —É–∂–µ –Ω–µ–∫—É–¥–∞ - –±–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å - —Å–º–µ—Ä—Ç—å
    while current or stack:
        while current:
            stack.append(current)
            current = current.left
        current = stack.pop()
        result.append(current.val)
        current = current.right
    return result

def tree_sort(arr, key=lambda x: x):
    root = Node(arr[0])
    for i in range(1, len(arr)):
        # –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–¥–æ –±—ã –∫–æ—Ä–µ–Ω—å –ø–µ—Ä–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—Ü–∞
        # –∞—Ä–≥—É–º–µ–Ω—Ç—ã —ç—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ—Ä–µ–Ω—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ 
        root = insert(root, arr[i], key=key)
    # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å !—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ! –¥–µ—Ä–µ–≤–æ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    # –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ –æ–±—Ö–æ–¥–æ–º –¥–µ—Ä–µ–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
    res = iterative_traversal(root)
    # –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø–æ–±–∞–ª—ã–≤–∞—Ç—å—Å—è –ø–æ–ø—Ä–∏–∫–∞–ª—ã–≤–∞—Ç—å—Å—è
    return res if res==recursion_traversal(root) else "—Ç–∞–π–ª–µ—Ä –¥–µ—Ä–¥–µ–Ω?"


from generation import read_file

# –°–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 999999
arr = read_file('integers.txt',int)
sorted_arr = tree_sort(arr)
print(sorted_arr==arr,len(arr))

# –°–ø–∏—Å–æ–∫ –∏–∑ 99999 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
arr = read_file('floats.txt',float)
sorted_arr = tree_sort(arr)
print(sorted_arr==sorted(arr),len(arr))

# 42000 —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏, –ª–µ–∂–∞—â–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ä–∞–¥–∏—É—Å–∞ r = birth_day / birth_month
arr = read_file('points.txt',complex)
sorted_arr = tree_sort(arr, key=lambda x: abs(x))
print(sorted_arr==sorted(arr, key=lambda x: abs(x)),len(arr))

# –û—Ç—Ä—ã–≤–æ–∫ –∏–∑ –∫–Ω–∏–≥–∏ –Ω–µ –º–µ–Ω–µ–µ 10000 —Å–ª–æ–≤, —Ä–∞–∑–±–∏—Ç—ã–π –≤ —Å–ø–∏—Å–æ–∫ –ø–æ —Å–ª–æ–≤–∞–º
from words import words
arr=words.split()
sorted_arr = tree_sort(arr)
print(sorted_arr==sorted(arr), len(arr))
